// stylelint-disable
//------------------------------------
//      $SPACING UTILITIES
//------------------------------------

$_default-spacing-classes-config: (
    silent: true,
    important: false,
    properties: (
        'm': margin,
    ),
    directions: (
        '': '',
    ),
    amounts: (
        '': 1,
    ),
    unit: 'auto',
    format: '{%namespace%}{%class%}{%breakpoint-namespace%}{%breakpoint%}'
);

$spacing-classes: $_default-spacing-classes-config !default;

/// Generates responsive spacing and padding classes. The `$namespace` argument is the media query's name, which will be appended to all generated classes. The `$config` argument is a map that allows JS-style arguments. Outputs class name as: `breakpoint_prefix_direction_amount`.
///
/// **`$config` Keys:**
/// * `directions:` names and directions to append to class names .`('-t': 'top')`
/// * `amounts:` Names and values to multiply by each `unit`. `('-2': 2)`
/// * `properties:` Class names for each property. `('pad': padding)`
/// * `silent:` boolean for outputting silent/non-silent classes.
/// * `important:` Whether to output `!important` after each declaration.
/// * `unit`: What unit to multiply each 'amounts'.
///
/// @param {string} $namespace [""] - a string to prepend to all spacing classes. Usually used for the media query's name that is calling this mixin.
/// @param {map} $config [()]
/// @param {map} $config.directions [('': '')]
/// @param {map} $config.amounts [('': 1)]
/// @param {map} $config.properties [('m': margin)]
/// @param {boolean} $config.important [false]
/// @param {boolean} $config.silent [true]
/// @param {boolean} $config.unit ['auto']
/// @param {string} $config.format ['{%namespace%}{%class%}{%breakpoint-namespace%}{%breakpoint%}']
///
@mixin _output-spacing-classes($namespace: '', $config: ()) {
    //Merge the passed map with default values
    $config: map-extend($_default-spacing-classes-config, $config);

    // Convert map values to variables for
    //    a better reading experience
    $classtype: if(map-get($config, silent), unquote('%'), unquote('.'));
    $properties: map-get($config, properties);
    $directions: map-get($config, directions);
    $amounts: map-get($config, amounts);
    // Allow for legacy 'units' config property
    $amounts: if(_is-set($amounts), $amounts, map-get($config, units));
    $important: map-get($config, important);
    $unit: map-get($config, unit);

    // Check for null properties, set reasonable defaults
    $properties: if(
        _is-set($properties), $properties,
        map-get($_default-spacing-classes-config, 'properties')
    );
    $directions: if(
        _is-set($directions), $directions,
        map-get($_default-spacing-classes-config, 'directions')
    );
    $amounts: if(
        _is-set($amounts), $amounts,
        map-get($_default-spacing-classes-config, 'amounts')
    );
    // stylelint-enable

    $class-name-list: ();
    $class-cache: ();

    //Loop through base names, then amounts, then directions.
    @each $given-name, $base-property in $properties {
        @each $amount_name, $amount in $amounts {
            @each $direction_name, $property-directions in $directions {
                $class_name: format-class-names(
                    map-get($config, 'format'),
                    (
                        'namespace': $namespace,
                        'class': '#{$given-name}#{$direction_name}#{$amount_name}'
                    )
                );

                $class_name: unquote(
                    '#{$classtype}#{$class_name}'
                );

                //Skip if the padding is a negative value.
                @if not(($base-property == 'padding') and ($amount < 0)) {
                    $class-name-list: map-merge(
                        $class-name-list,
                        (
                            $class_name: $amount,
                        )
                    );
                    #{$class_name} {
                        //multi-direction
                        @each $direction in $property-directions {
                            $property: $base-property;

                            @if ($direction) and ($direction != '') {
                                $property: $property + '-' + $direction;
                            }

                            $property-amount: '#{$property+$amount}';

                            @if map-get($class-cache, $property-amount) {
                                @extend #{map-get(
                                    $class-cache, $property-amount
                                )};
                            } @else {
                                $class-cache: map-merge(
                                    $class-cache,
                                    (
                                        $property-amount: $class_name
                                    )
                                );
                                //Using type-space mixin,
                                // output the REM-based value
                                @include type-space(
                                    $property,
                                    $amount,
                                    $important,
                                    $unit
                                );
                            }
                        }
                    }
                }
            }
        }
    }

    // Register silent classes for debugging.
    @if map-get($config, silent) and $debug-silent-classes {
        $_silent-class-registry: silents-register(
            $class-name-list,
            'spacing'
        ) !global;
    }
}

/// The responsive component to `_output-spacing-classes`. Invokes `spacing-utilites`
/// that loops through a set of media-queries defined in `$breakpoints`.
/// This is most useful for creating responsive spacing classes.
///
/// @group core
///
/// @param {map} $breakpoints [$_all-breakpoints] - breakpoints to loop over.
/// @param {string} $namespace [""] - string to prepend to all classes.
/// @param {map} $config [()] - Passed to `_output-spacing-classes` mixin.
///
@mixin spacing-classes(
    $breakpoints: map-keys($breakpoints),
    $namespace: '',
    $config: ()
) {
    $_defaults: (
        silent: false,
        format: '{%namespace%}{%class%}{%breakpoint-namespace%}{%breakpoint%}'
    );
    $config: map-extend($_defaults, $spacing-classes, $config, true);
    $format: format-class-names(
        map-get($config, 'format'),
        ('breakpoint': '', 'breakpoint-namespace': '')
    );
    @include _output-spacing-classes(
        $namespace,
        map-merge($config, ('format': $format))
    );

    @each $breakpoint in $breakpoints {
        @include media-query($breakpoint) {
            $format: format-class-names(
                map-get($config, 'format'),
                (
                'breakpoint': $breakpoint,
                'breakpoint-namespace': $breakpoint-namespace-character
                )
            );
            @include _output-spacing-classes(
                $namespace,
                map-merge($config, ('format': $format))
            );
        }
    }
}

/// @alias spacing-classes
///
@mixin spacing-utilities-init(
    $breakpoints: $_all-breakpoints,
    $namespace: '',
    $config: ()
) {
    @include spacing-classes($breakpoints, $namespace, $config);
}

@function _is-set($value) {
    @return ($value != null or length($value) != 0)
    //     @return false;
    // }
    //
    // @return true;
}
