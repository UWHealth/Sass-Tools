//------------------------------------
//      $WIDTHS
//------------------------------------

/// Second words used to represent numbers in a fraction; Corresponds to grid interval names (whole, half, third, etc.).
$_human-readable-numerators: one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty;

/// First words used to represent numbers in a fraction; Corresponds to grid interval names (one, two, three, etc.).
$_human-readable-denominators: whole, half, third, quarter, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelfth, thirteenth, fourteenth, fifteenth, sixteenth, seventeenth, eighteenth, nineteenth, twentieth, twentyfirst, twentysecond, twentythird, twentyfourth, twentyfifth, twentysixth, twentyseventh,twentyeigth, twentyninth;


/// Creates a percentage based on the `$size / $context` while allowing for a contextual calculations (`($total/$context) * ($columns/$total)`).
///
/// For instance, if you have a grid of 12 columns and you've created an item that is 7 columns wide, its children would then be in a 7/12 context. In order to maintain the grid and calculate the width of a child that spans 4 columns, it would have to be 1 quarter of 7/12.
/// @example
///    .parent {
///       width: grid-size(7, 12);
///    }
///    .child {
///       width: grid-size(4, 7, 12);
///    }
/// @group grid
/// @param {number} $columns - Column span
/// @param {number} $context [$grid-columns] - Out of how many columns?
/// @param {number} $total-columns [$grid-columns] -
/// @returns {number} percentage
///
@function grid-size($columns, $context: $grid-columns, $total-columns: $grid-columns) {
    //Correct for nested columns() calls
    @if (unit($context) == "%") {
        $context: ($context / ($context * 0 + 1) ) / 100;
        $context: $total-columns * $context;
    }
    $context: ($total-columns / $context);
    $columns: ($columns / $total-columns);

    @return percentage($context * $columns);
}

/// @alias grid-size
/// @group grid
@function columns($columns, $context: $grid-columns, $total-columns: $grid-columns) {
    @return grid-size($columns, $context, $total-columns);
}


/// Creates a width property with a percentage based on the `$columns / $total`. Also includes flex-based properties if `$grid-flex` is enabled.
/// @group grid
/// @param {number} $columns - Column span.
/// @param {number} $total [$grid-columns]
///
@mixin grid-width($columns, $total: $grid-columns) {
    width: #{grid-size($columns, $total)};
    @if $grid-flex {
        flex-basis: #{grid-size($columns, $grid-columns)};
        max-width: #{grid-size($columns, $grid-columns)};
    }
}

/// @alias grid-width
/// @group grid
///
@mixin width($columns, $total:$grid-columns) {
    @include grid-width($columns, $total);
}

/// Uses `$_human-readable-numerators` and `$_human-readable-denominators` to create percentages based on `$grid-columns`. `$property` accepts any property, as well as lists of properties.
/// @group grid
/// @param {string} $namespace [""] - String to put before grid classes.
/// @param {boolean} $silent [$grid-silent-classes] - Use silent classes?
/// @param {string} $property ["width"] - What property should these widths applied to?
/// @param {boolean} $important [false] - Should `!important` be applied to properties?
/// @param {string} $property ["width"] - What property should these widths applied to?

@mixin width-setup(
    $namespace: '',
    $silent: $grid-silent-classes,
    $property: 'width',
    $important: false,
    $columns: $grid-columns,
    $space: if($grid-bem-naming, '-', '_')
) {

    // [1] Loop through the $grid-columns.
    // [2] Loop through $divisor (same number as $grid-columns). This acts as the second number in our column fraction.
    // [3a]Loop through $divisor before it decreases by 1 from the previous loop.
    // [3b]After widths are defined, subtract 1 from $divisor.
    // [4] Assign the numerator and denominator of our fraction to human-readable versions (e.g. three, four, third, quarter, etc.).
    // [5] Check if the numerator equals 1 (one). If so, we keep our singular human-readable numerators and denominators (e.g. one_twelfth).
    // [6] If the numerator is larger than 1(one), add an 's' to our selector (e.g. two_eighths).
    //
    // Same system used for pushes and pulls.
    $class-type: if($silent, '%', '.');
    $divisor: $columns;
	$class-name-list: ();
    $prefix: '#{$class-type}#{$namespace}';
    $important: if($important, '!important', '');

    //To prevent stuff like 12/12 (five-fifths, etc.), we need to declare 1/1 here
    #{$prefix}one#{$space}whole {
        @each $type in $property {
            #{$type}: 100% #{$important};
        }
    }

    @for $i from 1 through $columns {                                         // [1]

        @while $divisor > 0 {                                                // [2]

            @for $dividen from 1 to $divisor {                              // [3a]
				//Create numerator (first number, e.g. 'two').
                $numerator: nth($_human-readable-numerators, $dividen);      // [4]

				//Create denominator (second number, e.g. 'thirds').
                $denominator: nth($_human-readable-denominators, $divisor);

				//Divide first number(numerator) by second number(denominator).
                $size: grid-size($dividen, $divisor);

                //Create class name
                $class-name: "#{$prefix}#{$numerator}#{$space}#{$denominator}";

                //Pluralize anything other than ratios with a numerator of 1
                @if $numerator != "one" {                                    // [5]
					$class-name: "#{$class-name}s";                          // [6]
                }

				#{$class-name} {
                    @each $type in $property {
                        @if index("top" "right" "bottom" "left", $type) != null {
                            position: relative;
                        }
                        #{$type}: $size #{$important};
                    }
                }

				@if $grid-silent-classes and $debug-silent-classes {
					$class-name-list: map-merge($class-name-list, ($class-name: $size));
				}

            }

            $divisor: $divisor - 1; //[3b]
        }
    }

    //Allow for fourths as an alias to quarters
    #{$prefix}one#{$space}fourth {
		@extend #{$prefix}one#{$space}quarter;
    }

    #{$prefix}two#{$space}fourths {
		@extend #{$prefix}two#{$space}quarters;
    }

    #{$prefix}three#{$space}fourths {
		@extend #{$prefix}three#{$space}quarters;
    }


	@if $silent and $debug-silent-classes {
		$class-name-list: map-merge($class-name-list,(
			#{$prefix}one#{$space}whole: 100%
		));
		$_silent-class-registry: silents-register($class-name-list, $type) !global;
	}
}
