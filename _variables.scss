$base-font-size:        16px !default;
$base-line-height:      24px !default;
$type-h1-size:          modular-scale(7) !default;
$type-h2-size:          modular-scale(5) !default;
$type-h3-size:          modular-scale(4) !default;
$type-h4-size:          modular-scale(3) !default;
$type-h5-size:          modular-scale(2) !default;
$type-h6-size:			modular-scale(1) !default;
$type-small-size:		modular-scale(-1) !default;

$auto-scale-type:       false !default;

$base-colors: (
    'type': (
        'base': #0a1c2b //Required
    ),
    'links': #0d497b, //Required

    'bg': #f6f8fb, //Required
) !default;

$system-font-stack: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, Roboto, 'Helvetica Neue', sans-serif;
$primary-font-stack: $system-font-stack !default;
$monospace-font-stack: 'SFMono-Regular', 'SF Mono', 'Ubuntu Mono', Consolas, 'DejaVu Sans Mono', Menlo, monospace !default;

$rem-px-fallback: false !default;

/// Pulls together config variables and routes them into structures expected by the framework, then makes them global.
/// For instance, the `$$type-h1-size` variable is accepted as a list, but will be available as a single size, while making `$type-h1-lh` available.
@mixin globalize-config() {

    @include _set-global-typography-variables();

    //Expand color map if necessary
    $base-colors:           verify-color-map-depth($base-colors) !global;

    /// Is this build mobile first? Setting to ‘true’ means that all grids will be
    /// 100% width if you do not apply a more specific class to them.
    $mobile-first:          true !global;

    /// Abstraction of the base spacing unit used in any mixin or function that defines spacing units.
    /// @type Number
    $type-base-unit:           $base-line-height !global;

    @if $base-font-size >= $type-base-unit {
        $type-base-unit: baseline-calc($base-font-size) * $base-font-size !global;
    }


    /// Ratio used to calculate the difference between font sizes and spacing units.
    /// @type Number
    $type-base-ratio:          ($type-base-unit / $base-font-size) !global;

    /// Used for defining automatic headings functions.
    /// @type List | Number
    $type-headings:            6, 5, 4, 3, 2, 1 !global;

    /// Spacing variable for simple inclusion.
    $type-space:               2 * $type-base-ratio !global;

    /// Used for easier math
    /// @type number
    $stripped-base-font-size:  strip-units($base-font-size) !global;

    /// Abstracts the `$$scale-ratio` and makes sure it's a positive number.
    /// @type Number
    $type-modular-scale:       $scale-ratio !global;

    //Checking for floats in $scale-ratio
    @if length($scale-ratio) == 2 {
        // Making sure we don't have a ratio below 1.
        @if nth($scale-ratio,1) < nth($scale-ratio,2) {
            $type-modular-scale: nth($scale-ratio, 2)/nth($scale-ratio, 1) !global;
        } @else {
            $type-modular-scale: nth($scale-ratio, 1)/nth($scale-ratio, 2) !global;
        }
    }

    /// Silent class registry.
    /// Holds all auto-generated silent classes for debugging.
    $silent-class-registry: () !global;

    /// Stores all the names defined in `$$breakpoints` for use in abstract framework components so that if names are chagned, boilerplate media queries won't fail.
    $all-breakpoints: () !global;

    //Grab all breakpoint names
    @each $breakpoint in $breakpoints {
        $temp-bp: nth($breakpoint, 1) !global;

        @if $temp-bp != ' ' {
            $all-breakpoints: append($all-breakpoints, $temp-bp, comma) !global;
        }
    }

    /// Grabs the first `$$breakpoints` name, allowing for abstraction.
    $breakpoint-smallest: nth($all-breakpoints, 1) !global;

    /// Grabs the last `$$breakpoints` name, allowing for abstraction.
    $breakpoint-largest:  nth($all-breakpoints, length($all-breakpoints)) !global;

    //------------------------------------
    //		$SANITIZE
    //------------------------------------

    $root-background-color: color('bg') !global;
    $root-color: color('type') !global;
    $root-font-family: $primary-font-stack !global;
    $root-font-size: percentage($base-font-size/16px) !global;
    $root-line-height: $type-base-ratio !global;
    $root-text-rendering: optimizeLegibility !global;
    $root-cursor: inherit !global;

    $anchor-text-decoration: none !global;
    $background-repeat: no-repeat !global;

    $form-element-min-height: $base-line-height !global;
    $textarea-resize: vertical !global;

    $media-element-vertical-align: middle !global;

    $monospace-font-family: $monospace-font-stack !global;

    $nav-list-style: none !global;

    $selection-background-color: mix(color('links'), color('bg'), 80%) !global;
    $selection-color: black-or-white($selection-background-color) !global;
    $selection-text-shadow: none !global;

    $table-border-collapse: collapse !global;
    $table-border-spacing: 0 !global;
}

@function verify-color-map-depth($color-map) {
    $is-deep-enough: true;

    @if map-depth($color-map) {
        $is-deep-enough: false;
    }
    @else {
        $i: 1;
        $map-length: length($color-map);

        @while ($i <= $map-length and $is-deep-enough) {
            $name: nth(nth($color-map, $i), 1);

            @if (type-of(map-get($color-map, $name) != 'map')) {
                $is-deep-enough: false;
            }

            $i: $i + 1;
        }
    }

    @if ($is-deep-enough == false) {
        $color-map: generate-color-variations($color-map);
    }

    @return $color-map;
}

/// Pulls typography variables apart and puts them into easier to use pieces.
/// For instance `$type-h1-size` starts as a list and becomes a single value, while adding `$type-h1-lh` (line-height) to the global scope for use.
@mixin _set-global-typography-variables() {
    @if $auto-scale-type {
        $type-h1-size:          modular-scale(7) !global;
        $type-h2-size:          modular-scale(5) !global;
        $type-h3-size:          modular-scale(4) !global;
        $type-h4-size:          modular-scale(3) !global;
        $type-h5-size:          modular-scale(2) !global;
        $type-h6-size:			modular-scale(1) !global;
        $type-small-size:		modular-scale(-1) !global;
    }

    //Check for existence of line-height override, and store it
    $type-h1-lh: if(length($type-h1-size) > 1,
        nth($type-h1-size, 2),
        baseline-calc(nth($type-h1-size, 1))
    ) !global;

    $h1-lh: $type-h1-lh !global; //alias

    $type-h2-lh: if(length($type-h2-size) > 1,
        nth($type-h2-size, 2),
        baseline-calc(nth($type-h2-size,1))
    ) !global;

    $h2-lh: $type-h2-lh !global; //alias

    $type-h3-lh: if(length($type-h3-size) > 1,
        nth($type-h3-size, 2),
        baseline-calc(nth($type-h3-size,1))
    ) !global;

    $h3-lh: $type-h3-lh !global; //alias

    $type-h4-lh: if(length($type-h4-size) > 1,
        nth($type-h4-size, 2),
        baseline-calc(nth($type-h4-size, 1))
    ) !global;

    $h4-lh: $type-h4-lh !global; //alias

    $type-h5-lh: if(length($type-h5-size) > 1,
        nth($type-h5-size, 2),
        baseline-calc(nth($type-h5-size, 1))
    ) !global;

    $h5-lh: $type-h5-lh !global; //alias

    $type-h6-lh: if(length($type-h6-size) > 1,
        nth($type-h6-size, 2),
        baseline-calc(nth($type-h6-size, 1))
    ) !global;

    $h6-lh: $type-h6-lh !global; //alias

    $type-p-lh: baseline-calc($base-font-size) !global;

    $p-lh: $type-p-lh !global; //alias

    $type-small-lh:	if(length($type-small-size) > 1,
        nth($type-small-size, 2),
        baseline-calc(nth($type-small-size, 1))
    ) !global;

    $small-lh: $type-small-lh !global; //alias

    //Make sure we only grab the first-value
    $type-h1-size: 				nth($type-h1-size, 1) !global;
    $type-h2-size: 				nth($type-h2-size, 1) !global;
    $type-h3-size:              nth($type-h3-size, 1) !global;
    $type-h4-size:              nth($type-h4-size, 1) !global;
    $type-h5-size:              nth($type-h5-size, 1) !global;
    $type-h6-size:              nth($type-h6-size, 1) !global;
    $type-p-size:               $base-font-size !global;
    $type-small-size: 			nth($type-small-size, 1) !global;
}
